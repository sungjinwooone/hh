// utils.js
const DateUtils = {
    format(date) {
        if (!date) return '';
        return new Date(date).toISOString().slice(0, 19).replace('T', ' ');
    },

    now() {
        return new Date().toISOString().slice(0, 19).replace('T', ' ');
    }
};

const NotificationSystem = {
    show(message, type = 'info') {
        // Remove notificações existentes
        const existingNotifications = document.querySelectorAll('.feedback-message');
        existingNotifications.forEach(n => n.remove());

        const notification = document.createElement('div');
        notification.className = `feedback-message ${type}`;
        notification.innerHTML = `
            <i class="ri-${type === 'success' ? 'check-line' : 'error-warning-line'}"></i>
            <span>${message}</span>
        `;
        document.body.appendChild(notification);

        // Animação de entrada
        setTimeout(() => notification.classList.add('show'), 10);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    },

    success(message) {
        this.show(message, 'success');
    },

    error(message) {
        this.show(message, 'error');
    }
};

const FetchInterceptor = {
    async fetch(options) {
        try {
            const response = await fetch(options.url, {
                method: options.method || 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                body: options.body ? JSON.stringify(options.body) : undefined
            });

            if (!response.ok) {
                throw new Error('Erro na requisição');
            }

            return await response.json();
        } catch (error) {
            console.error('Erro na requisição:', error);
            throw error;
        }
    }
};

const appConfigs = {
    cursos: {
        0: 'Supervisão de Soldados',
        1: 'Aula de Segurança',
        2: 'Aula de Promotor'
    },
    locais: {
        0: 'Batalhões',
        1: 'Corredores',
        2: 'Cabanas do Batalhão Auxiliar',
        3: 'Quarto particular',
        4: 'Sala de aplicação 1',
        5: 'Sala de aplicação 2',
        6: 'Sala de aplicação 3',
        7: 'Sala de aplicação 4'
    }
};

// Sistema de Loading
document.addEventListener('DOMContentLoaded', () => {
    initializeLoader();
});

function initializeLoader() {
    const loader = document.getElementById('loader');
    if (!loader) return;

    document.body.style.overflow = 'hidden';

    setTimeout(() => {
        loader.style.opacity = '0';
        setTimeout(() => {
            loader.style.display = 'none';
            document.body.style.overflow = 'visible';
            
            document.querySelector('.main-title')?.classList.add('fade-in');
            document.querySelector('.form-container')?.classList.add('fade-in');
        }, 500);
    }, 1500);
}

// formView.js
class FormView {
    constructor() {
        this.alunos = [];
        this.id_acc = 1;
        this.isLoading = false;
        this.finished = false;

        this.initialize();
    }

    initialize() {
        this.setupEventListeners();
        this.loadQueryParams();

        const dtInput = document.querySelector('[name="dt_inicio"]');
        if (dtInput) {
            const now = new Date();
            dtInput.value = now.toISOString().slice(0, 16);
        }
    }

    setupEventListeners() {
        // Form submit
        const form = document.getElementById('aula-form');
        if (form) {
            form.addEventListener('submit', (e) => this.handleSubmit(e));
        }

        // Aula tutorada checkbox
        const aulaTutorada = document.querySelector('[name="aula_tutorada"]');
        if (aulaTutorada) {
            aulaTutorada.addEventListener('change', () => this.toggleTutorField());
        }

        // Curso select
        const cursoSelect = document.querySelector('[name="curso"]');
        if (cursoSelect) {
            cursoSelect.addEventListener('change', (e) => this.handleCursoChange(e));
        }

        // Adicionar aluno
        const addButton = document.querySelector('.add-student-button');
        if (addButton) {
            addButton.addEventListener('click', () => this.addStudent());
        }

        // Input de novo aluno
        const newStudentInput = document.getElementById('new-student-input');
        if (newStudentInput) {
            newStudentInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.addStudent();
                }
            });
        }

        // Validações de campos obrigatórios
        const requiredInputs = document.querySelectorAll('input[required], select[required]');
        requiredInputs.forEach(input => {
            input.addEventListener('invalid', (e) => {
                e.preventDefault();
                this.showFieldError(input);
            });
        });
    }

    handleCursoChange(e) {
        const confirmContainer = document.querySelector('.confirm-container');
        if (confirmContainer) {
            confirmContainer.remove();
        }

        if (e.target.value === '0') { // Supervisão de Soldados
            const container = document.createElement('div');
            container.className = 'confirm-container fade-in form-field';
            container.innerHTML = `
                <label class="checkbox-wrapper">
                    <input type="checkbox" name="system_confirm" required>
                    <span class="checkbox-custom"></span>
                    <span>Confirmo que verifiquei que o soldado criou conta no system</span>
                </label>
            `;
            e.target.parentNode.after(container);
        }
    }

    showFieldError(field) {
        const fieldName = field.getAttribute('name');
        const errorMessages = {
            'nick': 'Digite o nickname do instrutor',
            'dt_inicio': 'Selecione a data e hora',
            'curso': 'Selecione o curso',
            'local': 'Selecione o local',
            'nick_tutor': 'Digite o nickname do tutor',
            'system_confirm': 'Confirme a verificação da conta no system'
        };

        NotificationSystem.error(errorMessages[fieldName] || 'Preencha este campo');
    }

    toggleTutorField() {
        const tutorField = document.querySelector('.tutor-field');
        const checkbox = document.querySelector('[name="aula_tutorada"]');
        
        if (tutorField && checkbox) {
            if (checkbox.checked) {
                tutorField.classList.remove('hidden');
                tutorField.querySelector('input').required = true;
            } else {
                tutorField.classList.add('hidden');
                tutorField.querySelector('input').required = false;
                tutorField.querySelector('input').value = '';
            }
        }
    }

createStudentElement(aluno) {
        const studentCard = document.createElement('div');
        studentCard.className = 'student-card';
        studentCard.dataset.id = aluno.id;

        const studentHtml = `
            <div class="student-info">
                <input 
                    type="text" 
                    class="student-name"
                    value="${aluno.nome}"
                    onchange="window.formView.updateStudent(${aluno.id}, 'nome', this.value)"
                >
            </div>
            <div class="status-buttons">
                ${this.createStatusButtons(aluno)}
            </div>
        `;

        studentCard.innerHTML = studentHtml;

        // Se o status for "Caiu", adiciona o container de link
        if (aluno.status === 3) {
            this.addProofContainer(aluno.id);
        }

        return studentCard;
    }

    createStatusButtons(aluno) {
        const statusConfig = {
            1: { icon: 'close-circle', class: 'status-failed', tooltip: 'Reprovado' },
            2: { icon: 'check-circle', class: 'status-approved', tooltip: 'Aprovado' },
            3: { icon: 'time', class: 'status-pending', tooltip: 'Caiu' }
        };

        const currentStatus = statusConfig[aluno.status];
        const nextStatus = aluno.status === 2 ? 3 : aluno.status === 3 ? 1 : 2;

        return `
            <button 
                type="button" 
                class="status-button ${currentStatus.class} tooltip"
                data-tooltip="${currentStatus.tooltip}"
                onclick="window.formView.updateStudent(${aluno.id}, 'status', ${nextStatus})"
            >
                <i class="ri-${currentStatus.icon}-line"></i>
            </button>
            <button 
                type="button" 
                class="status-button delete-button tooltip" 
                data-tooltip="Remover aluno"
                onclick="window.formView.removeStudent(${aluno.id})"
            >
                <i class="ri-delete-bin-line"></i>
            </button>
        `;
    }

    addProofContainer(studentId) {
        const proofContainerId = `proof-container-${studentId}`;
        let proofContainer = document.getElementById(proofContainerId);
        
        if (!proofContainer) {
            proofContainer = document.createElement('div');
            proofContainer.id = proofContainerId;
            proofContainer.className = 'proof-container fade-in';
            proofContainer.innerHTML = `
                <div class="proof-input-group">
                    <i class="ri-link-line"></i>
                    <input 
                        type="text" 
                        class="proof-input"
                        placeholder="Insira o link comprobatório"
                        required
                        onchange="window.formView.updateStudent(${studentId}, 'proofLink', this.value)"
                    >
                </div>
            `;
            
            const studentsList = document.querySelector('.students-section');
            if (studentsList) {
                studentsList.appendChild(proofContainer);
            }
        }
    }

    removeProofContainer(studentId) {
        const proofContainer = document.getElementById(`proof-container-${studentId}`);
        if (proofContainer) {
            proofContainer.classList.add('fade-out');
            setTimeout(() => proofContainer.remove(), 300);
        }
    }

    addStudent() {
        const input = document.getElementById('new-student-input');
        if (!input || !input.value.trim()) {
            NotificationSystem.error('Adicione o nick do aluno');
            input.classList.add('shake');
            setTimeout(() => input.classList.remove('shake'), 300);
            return;
        }

        const aluno = {
            id: this.id_acc++,
            nome: input.value.trim(),
            status: 1, // Status inicial: Reprovado
            proofLink: '' // Link comprobatório (quando necessário)
        };

        this.alunos.push(aluno);
        
        const studentsList = document.getElementById('students-list');
        if (studentsList) {
            const studentElement = this.createStudentElement(aluno);
            studentsList.appendChild(studentElement);
            studentElement.classList.add('fade-in');
        }

        input.value = '';
        input.focus();
    }

    removeStudent(id) {
        const studentCard = document.querySelector(`.student-card[data-id="${id}"]`);
        if (studentCard) {
            studentCard.classList.add('fade-out');
            this.removeProofContainer(id);
            setTimeout(() => {
                this.alunos = this.alunos.filter(a => a.id !== id);
                studentCard.remove();
            }, 300);
        }
    }

    updateStudent(id, campo, valor) {
        const aluno = this.alunos.find(a => a.id === id);
        if (!aluno) return;

        aluno[campo] = valor;

        if (campo === 'status') {
            const statusButtons = document.querySelector(`.student-card[data-id="${id}"] .status-buttons`);
            if (statusButtons) {
                statusButtons.innerHTML = this.createStatusButtons(aluno);
            }

            // Gerencia o container de proof link
            if (valor === 3) { // Status "Caiu"
                this.addProofContainer(id);
            } else {
                this.removeProofContainer(id);
            }
        }
    }

async handleSubmit(e) {
        e.preventDefault();
        if (this.isLoading) return;

        const form = e.target;
        const submitButton = form.querySelector('button[type="submit"]');

        // Validações
        const validations = [
            { field: form.nick, message: 'Digite o nickname do instrutor' },
            { field: form.dt_inicio, message: 'Selecione a data e hora' },
            { field: form.curso, message: 'Selecione o curso' },
            { field: form.local, message: 'Selecione o local' }
        ];

        // Adiciona validação do tutor se aula tutorada estiver marcada
        if (form.aula_tutorada.checked) {
            validations.push({ 
                field: form.nick_tutor, 
                message: 'Digite o nickname do tutor' 
            });
        }

        // Validação do system confirm para Supervisão de Soldados
        if (form.curso.value === '0') {
            const systemConfirm = form.system_confirm;
            if (!systemConfirm?.checked) {
                NotificationSystem.error('Confirme a verificação da conta no system');
                return;
            }
        }

        // Verifica todas as validações
        for (const validation of validations) {
            if (!validation.field.value.trim()) {
                NotificationSystem.error(validation.message);
                validation.field.classList.add('shake');
                setTimeout(() => validation.field.classList.remove('shake'), 300);
                return;
            }
        }

        if (this.alunos.length === 0) {
            NotificationSystem.error('Adicione pelo menos um aluno');
            return;
        }

        // Verifica se todos os alunos com status "Caiu" têm link comprobatório
        const alunosSemLink = this.alunos.filter(a => a.status === 3 && !a.proofLink);
        if (alunosSemLink.length > 0) {
            NotificationSystem.error('Adicione o link comprobatório para todos os alunos que caíram');
            return;
        }

        try {
            this.isLoading = true;
            
            // Atualiza o texto do botão
            submitButton.innerHTML = `
                <i class="ri-loader-4-line rotating"></i>
                <span>Postando...</span>
            `;
            submitButton.disabled = true;
            submitButton.classList.add('button-pulse');

            const formData = {
                dt_inicio: form.dt_inicio.value,
                curso: form.curso.value,
                nick: form.nick.value,
                local: form.local.value,
                obs: form.obs.value,
                aula_tutorada: form.aula_tutorada.checked,
                nick_tutor: form.aula_tutorada.checked ? form.nick_tutor.value : null,
                system_confirm: form.curso.value === '0' ? form.system_confirm.checked : null,
                alunos: this.alunos
            };

            // Simulação de envio (substitua pelo seu endpoint real)
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // Após sucesso
            this.showSuccessView();
            NotificationSystem.success('Aula registrada com sucesso!');

        } catch (error) {
            console.error('Erro ao enviar formulário:', error);
            NotificationSystem.error('Erro ao registrar aula');
        } finally {
            this.isLoading = false;
            submitButton.disabled = false;
            submitButton.classList.remove('button-pulse');
            submitButton.innerHTML = `
                <i class="ri-save-line"></i>
                <span>Registrar Aula</span>
            `;
        }
    }

    showSuccessView() {
        const formCard = document.querySelector('.form-card');
        if (!formCard) return;

        this.finished = true;
        formCard.innerHTML = `
            <div class="finished-view">
                <div class="success-icon bounce">
                    <i class="ri-checkbox-circle-line"></i>
                </div>
                <h2 class="success-title gradient-text">Aula Registrada com Sucesso!</h2>
                <p class="success-description">Seus dados foram salvos corretamente.</p>
                <div class="success-buttons">
                    <button class="success-button" onclick="window.formView.resetForm()">
                        <i class="ri-add-circle-line"></i>
                        <span>Nova Aula</span>
                    </button>
                    <a href="https://system.policercc.com.br/companhia/supervisorese" class="success-button" target="_blank">
                        <i class="ri-shield-star-line"></i>
                        <span>System</span>
                    </a>
                    <button class="success-button">
                        <i class="ri-file-excel-2-line"></i>
                        <span>Planilha</span>
                    </button>
                </div>
            </div>
        `;
    }

    resetForm() {
        window.location.reload();
    }

    loadQueryParams() {
        const params = new URLSearchParams(window.location.search);
        
        const fields = ['nick', 'local', 'curso'];
        fields.forEach(field => {
            const value = params.get(field);
            if (value) {
                const input = document.querySelector(`[name="${field}"]`);
                if (input) input.value = value;
            }
        });

        // Verifica se precisa mostrar o checkbox do system após carregar o curso
        const cursoValue = params.get('curso');
        if (cursoValue === '0') {
            this.handleCursoChange({ target: { value: '0' } });
        }
    }
}

// Inicialização global
window.formView = new FormView();
